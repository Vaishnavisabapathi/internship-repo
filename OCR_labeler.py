{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP34DegiCiiwGQXZmvjoQQv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"z0mifpByL2Jc"},"outputs":[],"source":["import os\n","import cv2\n","import io\n","import torch\n","import numpy as np\n","import pandas as pd\n","from PIL import Image\n","import streamlit as st\n","from pdf2image import convert_from_bytes\n","from transformers import TrOCRProcessor, VisionEncoderDecoderModel\n","\n","# ---------------- Model Loading ----------------\n","@st.cache_resource\n","def load_model():\n","    processor = TrOCRProcessor.from_pretrained(\"microsoft/trocr-base-handwritten\")\n","    model = VisionEncoderDecoderModel.from_pretrained(\"microsoft/trocr-base-handwritten\")\n","    model.to(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","    return processor, model\n","\n","processor, model = load_model()\n","\n","# ---------------- Line Segmentation ----------------\n","def segment_lines(image, proj_threshold=15, min_line_height=10):\n","    img = np.array(image)\n","    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n","    _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)\n","    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 3))\n","    binary = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)\n","    projection = np.sum(binary, axis=1)\n","\n","    lines = []\n","    in_line = False\n","    start = 0\n","\n","    for y in range(binary.shape[0]):\n","        if projection[y] > proj_threshold:\n","            if not in_line:\n","                start = y\n","                in_line = True\n","        else:\n","            if in_line:\n","                end = y\n","                in_line = False\n","                if end - start > min_line_height:\n","                    lines.append((start, end))\n","    if in_line:\n","        end = binary.shape[0]\n","        if end - start > min_line_height:\n","            lines.append((start, end))\n","\n","    line_images = []\n","    for top, bottom in lines:\n","        margin = 5\n","        y1 = max(0, top - margin)\n","        y2 = min(img.shape[0], bottom + margin)\n","        cropped = Image.fromarray(img[y1:y2, :])\n","        line_images.append(cropped)\n","\n","    return line_images\n","\n","# ---------------- OCR Function ----------------\n","@st.cache_data(show_spinner=False)\n","def run_ocr(image):\n","    pixel_values = processor(images=image, return_tensors=\"pt\").pixel_values\n","    pixel_values = pixel_values.to(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","    generated_ids = model.generate(pixel_values)\n","    return processor.batch_decode(generated_ids, skip_special_tokens=True)[0]\n","\n","# ---------------- Streamlit UI ----------------\n","st.set_page_config(page_title=\"OCR Labeling\", layout=\"wide\")\n","st.title(\"üìÑ Handwritten Line-Level OCR + Labeling Tool\")\n","\n","uploaded_files = st.file_uploader(\n","    \"üìÅ Upload PDFs or Images\", type=[\"pdf\", \"png\", \"jpg\", \"jpeg\"], accept_multiple_files=True\n",")\n","\n","if uploaded_files:\n","    labeled_data = []\n","    line_queue = []\n","\n","    for file in uploaded_files:\n","        filename = file.name\n","        if filename.lower().endswith(\".pdf\"):\n","            pages = convert_from_bytes(file.read())\n","            for i, page in enumerate(pages):\n","                lines = segment_lines(page)\n","                for j, line in enumerate(lines):\n","                    line_id = f\"{os.path.splitext(filename)[0]}_page{i+1:03}_line{j+1:03}\"\n","                    line_queue.append((line_id, line))\n","        else:\n","            image = Image.open(file).convert(\"RGB\")\n","            lines = segment_lines(image)\n","            for j, line in enumerate(lines):\n","                line_id = f\"{os.path.splitext(filename)[0]}_line{j+1:03}\"\n","                line_queue.append((line_id, line))\n","\n","    # Pre-fill OCR for the first 5 lines\n","    ocr_results = {}\n","    for idx in range(min(5, len(line_queue))):\n","        line_id, image = line_queue[idx]\n","        ocr_results[line_id] = run_ocr(image)\n","\n","    placeholder = st.empty()\n","\n","    for idx, (line_id, image) in enumerate(line_queue):\n","        st.image(image, caption=line_id, width=600)\n","\n","        # Run OCR for upcoming line if not already\n","        if idx + 5 < len(line_queue) and line_queue[idx + 5][0] not in ocr_results:\n","            next_id, next_image = line_queue[idx + 5]\n","            ocr_results[next_id] = run_ocr(next_image)\n","\n","        default_text = ocr_results.get(line_id, \"\")\n","        corrected_text = st.text_area(f\"‚úèÔ∏è Edit Text for {line_id}\", value=default_text, height=100)\n","        labeled_data.append({\"line_id\": line_id, \"text\": corrected_text})\n","\n","    if st.button(\"‚úÖ Save All Labels\"):\n","        df = pd.DataFrame(labeled_data)\n","        csv_data = df.to_csv(index=False).encode(\"utf-8\")\n","        st.download_button(\"‚¨áÔ∏è Download labeled_data.csv\", csv_data, file_name=\"labeled_data.csv\", mime=\"text/csv\")\n","        st.success(\"Labels saved successfully!\")\n","\n","else:\n","    st.info(\"Please upload some segmented images or PDFs to begin.\")"]}]}